
var TestLayer = cc.LayerColor.extend({
    name: null,
    nameLabel: null,
    activeColor: cc.c4b(255, 0, 0, 255),
	rect: null,
    color: null,
    touching: false,

    ctor: function(name, priority, rect, color) {
        this._super();
	    this.init(color, rect.width, rect.height);
	    this.setAnchorPoint(0, 0);
	    this.setPosition(rect._origin);
        this.name = name || "";
        this.nameLabel = cc.LabelTTF.create(this.name, "Helvetica", 13, cc.size(260, 30), cc.TEXT_ALIGNMENT_RIGHT);
        this.nameLabel.setAnchorPoint(1, 1);
	    this.nameLabel.setPosition(cc.p(rect.width, rect.height));
	    this.addChild(this.nameLabel);

	    this.color = color;
	    this.rect = rect;

        this.setTouchEnabled(true);
        this.setTouchPriority(priority);
    },

	changeColor: function(color) {
		this.setColor(color);
	},

    testTouch: function(touch) {
        var tpos = touch.getLocation(), tx = tpos.x, ty = tpos.y,
            origin = this.getPosition(), ox = origin.x, oy = origin.y,
            size = this.getContentSize(), w = size.width, h = size.height;
        if(tx > ox && tx < ox+w && ty > oy && ty < oy+h)
            return true;
        else return false;
    },

    onTouchesBegan: function(touches) {
        if(this.testTouch(touches[0])) {
            this.touching = true;
            this.changeColor(this.activeColor);
            (logTest || cc.log)(this.name + ": Touch began");
        }
    },

    onTouchesMoved: function(touches) {

    },

    onTouchesEnded: function() {
        if(this.touching) {
            this.changeColor(this.color);
            (logTest || cc.log)(this.name + ": Touch ended");
            this.touching = false;
        }
    },

    onTouchBegan: function(touch) {
        if(this.testTouch(touch)) {
            this.changeColor(this.activeColor);
            (logTest || cc.log)(this.name + ": Touch began");
	        // Important to tell the dispatcher if this layer responded to the touch event
	        // Only needed in TOUCH_ONE_BY_ONE mode
            return true;
        }
        else return false;
    },

    onTouchMoved: function(touch) {

    },

    onTouchEnded: function(touch) {
        this.changeColor(this.color);
        (logTest || cc.log)(this.name + ": Touch ended");
        return true;
    }
});

var SwallowLayer = TestLayer.extend({
    ctor: function(name, priority, rect, color) {
        this._super(name, priority, rect, color);
	    // cc.TOUCH_ONE_BY_ONE
	    // This makes the touch been dispatched for its listeners one after another in order of priority,
	    // swallow touch is the behavior by default.
	    // Another mode which is the default is cc.TOUCH_ALL_AT_ONCE,
	    // in this mode, touches are still been dispatched in priority order,
	    // but all listener will be notified without exclusion.
        this.setTouchMode(cc.TOUCH_ONE_BY_ONE);
    }
});

var PropaLayer = TestLayer.extend({
    ctor: function(name, priority, rect, color) {
        this._super(name, priority, rect, color);
        this.setTouchMode(cc.TOUCH_ONE_BY_ONE);

	    this.setTouchEnabled(false);
	    // Don't swallow touches, we must re-enable the touch to make the changes happen
	    this.setTouchEnabled(true, false);
    }
});


var TouchPropagationTest = cc.Scene.extend({
    ctor: function() {
        this._super();

        var winSize = cc.Director.getInstance().getWinSize(), w = winSize.width, h = winSize.height;

        var propaLayer1 = new PropaLayer("Propagation Layer Priority 5", 5, cc.rect(0, 0, w, h), cc.c4b(248, 194, 205, 255));

        var standardLayer1 = new TestLayer("Standard Layer Priority 4", 4, cc.rect(0, 0, w*0.8, h*0.8), cc.c4b(246, 92, 46, 255));

        var swallowLayer = new SwallowLayer("Swallow Layer Priority 3", 3, cc.rect(w*0.1, h*0.1, w*0.6, h*0.6), cc.c4b(115, 74, 56, 255));

        var propaLayer2 = new PropaLayer("Propagation Layer Priority 2", 2, cc.rect(0, 0, w*0.4, h*0.4), cc.c4b(189, 195, 64, 255));

        var standardLayer2 = new TestLayer("Standard Layer Priority 1", 1, cc.rect(0, 0, w*0.2, h*0.2), cc.c4b(102, 187, 179, 255));

        this.addChild(propaLayer1, 1);
        this.addChild(standardLayer1, 2);
        this.addChild(swallowLayer, 3);
        this.addChild(propaLayer2, 4);
        this.addChild(standardLayer2, 5);
    }
});

TouchPropagationTest.create = function() {
    return new TouchPropagationTest();
}