/**
 * Created by wzm on 13-12-30.
 */
var ShaderRetroEffect = cc.Layer.extend({
    ctor:function() {
        this._super();
        var winSize = cc.Director.getInstance().getWinSize();
        if( 'opengl' in sys.capabilities ) {
            var program = cc.GLProgram.create(res.example_ColorBars_vsh,res.example_ColorBars_fsh);
            program.addAttribute(cc.ATTRIBUTE_NAME_POSITION, cc.VERTEX_ATTRIB_POSITION);
            program.addAttribute(cc.ATTRIBUTE_NAME_TEX_COORD, cc.VERTEX_ATTRIB_TEX_COORDS);
            program.link();
            program.updateUniforms();

            var label = cc.LabelBMFont.create("RETRO EFFECT","res/fonts/west_england-64.fnt");
            label.setShaderProgram( program );

            label.setPosition(winSize.width/2, winSize.height/2);
            this.addChild(label);

            this.scheduleUpdate();

            this.label = label;
            this.accum = 0;
        }else{
            var label = cc.LabelTTF.create("Not Support For Canvas", "Arial", 20);
            this.addChild(label);
            label.setPosition(cc.p(winSize.width/2,winSize.height/2));
        }
    },
    update:function(dt) {
        this.accum += dt;
        var children = this.label.getChildren();

        for( var i in children ) {
            var sprite = children[i];
            var oldPosition = sprite.getPosition();
            sprite.setPosition( oldPosition.x, Math.sin( this.accum * 2 + i/2.0) * 20  );

            // add fabs() to prevent negative scaling
            var scaleY = ( Math.sin( this.accum * 2 + i/2.0 + 0.707) );

            sprite.setScaleY( scaleY );
        }
    }
});
ShaderRetroEffect.create = function(args){
    var layer = new ShaderRetroEffect();
    return layer.init() ? layer : null;
}